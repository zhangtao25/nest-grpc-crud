import { Body, Controller, Inject,Post } from '@nestjs/common';
import { GrpcMethod } from '@nestjs/microservices';
import { ClentServe } from '../src/grpc/grpc.client.server';

<% columns.forEach(function(column){ %>
    import { <%- column.Name %>CrudService } from './apps/<%- column.name %>/<%- column.name %>.crud.service';
<% }); %>




@Controller()
export class AppController {
    constructor(
    @Inject(ClentServe) private readonly clentServe: ClentServe,
    <% columns.forEach(function(column){ %>
        private readonly <%- column.name %>CrudService: <%- column.Name %>CrudService,
    <% }); %>
    ) {
    }

    <% columns.forEach(function(column){ %>
        private <%- column.name %>Service
    <% }); %>


    onModuleInit() {


<% columns.forEach(function(column){ %>
    this.<%- column.name %>Service = this.clentServe.client.getService('<%- column.Name %>CrudService');
<% }); %>

    }



<% columns.forEach(function(column){ %>




    @Post('create<%- column.Name %>')
    _create<%- column.Name %>(@Body() body) {
    return this.<%- column.name %>Service.create(body);
    }

    @Post('delete<%- column.Name %>')
    _delete<%- column.Name %>(@Body() body) {
    return this.<%- column.name %>Service.delete(body);
    }

    @Post('update<%- column.Name %>')
    _update<%- column.Name %>(@Body() body) {
    return this.<%- column.name %>Service.update(body);
    }

    @Post('find<%- column.Name %>')
    _find<%- column.Name %>(@Body() body) {
    return this.<%- column.name %>Service.find(body);
    }




<% }); %>







<% columns.forEach(function(column){ %>

    // <%- column.name %>
    @GrpcMethod(<%- column.Name %>CrudService.service, 'Create')
    async create<%- column.Name %>(req): Promise<any> {
    return await this.<%- column.name %>CrudService.create(req);
    }

    @GrpcMethod(<%- column.Name %>CrudService.service, 'Delete')
    async delete<%- column.Name %>(req): Promise<any> {
    const id = req.id;
    return await this.<%- column.name %>CrudService.delete(id);
    }

    @GrpcMethod(<%- column.Name %>CrudService.service, 'Update')
    async update<%- column.Name %>(req): Promise<any> {
    const id = req.id;
    delete req.id
    return await this.<%- column.name %>CrudService.update(id,req);
    }

    @GrpcMethod(<%- column.Name %>CrudService.service, 'Find')
    async find<%- column.Name %>(req): Promise<any> {
    const commonField = req.commonField;
    const entity = req.entity;
    return await this.<%- column.name %>CrudService.find(entity, commonField);
    }

<% }); %>

}
